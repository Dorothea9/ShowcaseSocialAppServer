openapi: 3.0.0
info:
  title: Showcase Social App Server
  version: 1.0.0
  description: >
    This is a server for Dorota Belanov√°'s [Showcase Social App](https://github.com/Dorothea9/ShowcaseSocialApp).
  contact:
    email: belanova.dorota@gmail.com

servers:
  - url: http://localhost:8080
    description: Local development server

paths:
  # Authentication Routes
  /auth/register:
    post:
      tags: [Authentication]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid JSON
        '409':
          description: Email is already used
        '422':
          description: Invalid email format

  /auth/login:
    post:
      tags: [Authentication]
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid JSON
        '401':
          description: Invalid credentials
        '422':
          description: Invalid email format

  /auth/logout:
    post:
      tags: [Authentication]
      summary: Logout user (revoke refresh token)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogoutRequest'
      responses:
        '204':
          description: Logged out successfully
        '400':
          description: Refresh token required
        '422':
          description: Invalid or expired refresh token

  /auth/refresh:
    post:
      tags: [Authentication]
      summary: Refresh access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: New access token generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenResponse'
        '400':
          description: Refresh token required
        '422':
          description: Invalid or expired refresh token

  # User Routes
  /users/{userId}:
    get:
      tags: [Users]
      summary: Get user by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: UUID of the user
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid user ID
        '401':
          description: Unauthorized
        '404':
          description: User not found

  /users/{userId}/posts:
    get:
      tags: [Users]
      summary: Get posts by specific user
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: UUID of the user
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 20
            maximum: 50
          description: Number of posts per page
      responses:
        '200':
          description: User's posts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostsResponse'
        '400':
          description: Invalid user ID
        '401':
          description: Unauthorized
        '404':
          description: User not found

  /users/{userId}/likes:
    get:
      tags: [Users]
      summary: Get posts liked by user
      description: "Returns posts liked by the specified user. Requires authentication and includes isLiked status for the authenticated user."
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: UUID of the user
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 20
            maximum: 50
          description: Number of posts per page
      responses:
        '200':
          description: Posts liked by user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostsResponse'
        '400':
          description: Invalid user ID
        '401':
          description: Unauthorized
        '404':
          description: User not found

  /profile-photo:
    put:
      tags: [Profile Photos]
      summary: Upload/update profile photo
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                photo:
                  type: string
                  format: binary
                  description: Image file (JPG, JPEG, PNG)
      responses:
        '200':
          description: Profile photo updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfilePhotoResponse'
        '201':
          description: Profile photo uploaded (first time)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfilePhotoResponse'
        '400':
          description: Missing file
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '422':
          description: No photo found in form data
        '500':
          description: Internal server error

    delete:
      tags: [Profile Photos]
      summary: Delete profile photo
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Profile photo deleted
        '401':
          description: Unauthorized
        '404':
          description: No profile photo found
        '500':
          description: Internal server error

  # Post Routes
  /posts:
    get:
      tags: [Posts]
      summary: Get all posts
      description: "Returns all posts for authenticated users with isLiked status."
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 20
            maximum: 50
          description: Number of posts per page
      responses:
        '200':
          description: List of posts with pagination
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostsResponse'
        '401':
          description: Unauthorized

    post:
      tags: [Posts]
      summary: Create a new post
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePostRequest'
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Invalid JSON
        '401':
          description: Unauthorized
        '422':
          description: Post text must be between 1 and 250 characters long
        '500':
          description: Internal server error

  /posts/{postId}:
    delete:
      tags: [Posts]
      summary: Delete a post
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: postId
          schema:
            type: string
          required: true
          description: UUID of the post
      responses:
        '204':
          description: Post deleted successfully
        '400':
          description: Post ID is required
        '401':
          description: Unauthorized
        '403':
          description: You can only delete your own posts
        '404':
          description: Post not found

  # Like Routes
  /posts/{postId}/like:
    post:
      tags: [Likes]
      summary: Like a post
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: postId
          schema:
            type: string
          required: true
          description: UUID of the post to like
      responses:
        '204':
          description: Post liked successfully
        '400':
          description: Post ID is required
        '401':
          description: Unauthorized
        '404':
          description: Post not found
        '409':
          description: Post already liked
        '422':
          description: Cannot like your own post

    delete:
      tags: [Likes]
      summary: Unlike a post
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: postId
          schema:
            type: string
          required: true
          description: UUID of the post to unlike
      responses:
        '204':
          description: Post unliked successfully
        '400':
          description: Post ID is required
        '401':
          description: Unauthorized
        '404':
          description: Post not found
        '422':
          description: Post is not liked by user

  # Static Routes
  /Uploads/ProfilePhotos/{filename}:
    get:
      tags: [Static Files]
      summary: Serve profile photo files
      parameters:
        - in: path
          name: filename
          schema:
            type: string
          required: true
          description: Filename of the profile photo
      responses:
        '200':
          description: Profile photo file
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
        '404':
          description: File not found

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Authentication Schemas
    RegisterRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        password:
          type: string
          minLength: 6
          example: "password123"
      required:
        - email
        - firstName
        - lastName
        - password

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "emma.latte@beanmail.com"
        password:
          type: string
          example: "SecretPassword1"
      required:
        - email
        - password

    LogoutRequest:
      type: object
      properties:
        refreshToken:
          type: string
          example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
      required:
        - refreshToken

    RefreshTokenRequest:
      type: object
      properties:
        refreshToken:
          type: string
          example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
      required:
        - refreshToken

    RefreshTokenResponse:
      type: object
      properties:
        accessToken:
          type: string
          example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
        expiresIn:
          type: number
          example: 900.0
          description: Access token expiration time in seconds
        tokenType:
          type: string
          example: "Bearer"

    UserInfo:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440001"
          description: ID of the user
        firstName:
          type: string
          example: "Emma"
        lastName:
          type: string
          example: "Latte"
        profilePhotoUrl:
          type: string
          nullable: true
          example: "/Uploads/ProfilePhotos/user_profile_123.jpg"

    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
          example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
        refreshToken:
          type: string
          example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
        accessTokenExpiresIn:
          type: number
          example: 900.0
          description: Access token expiration time in seconds
        refreshTokenExpiresIn:
          type: number
          example: 604800.0
          description: Refresh token expiration time in seconds
        tokenType:
          type: string
          example: "Bearer"
        user:
          $ref: '#/components/schemas/UserInfo'

    # User Schemas
    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440001"
        email:
          type: string
          format: email
          example: "user@example.com"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        profilePhotoUrl:
          type: string
          nullable: true
          example: "/Uploads/ProfilePhotos/user_profile_123.jpg"

    UserSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440001"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        profilePhotoUrl:
          type: string
          example: "/Uploads/ProfilePhotos/user_profile_123.jpg"

    # Post Schemas
    Post:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "a6e3f0d5-1c01-4d80-b0fa-6f2c321fd244"
        createdAt:
          type: string
          format: date-time
          example: "2025-06-25T10:18:23Z"
        text:
          type: string
          example: "Life happens, coffee helps."
        userId:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440002"

    PostWithUserSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "a6e3f0d5-1c01-4d80-b0fa-6f2c321fd244"
        createdAt:
          type: string
          format: date-time
          example: "2025-06-25T10:18:23Z"
        text:
          type: string
          example: "Life happens, coffee helps."
        userSummary:
          $ref: '#/components/schemas/UserSummary'
        isLiked:
          type: boolean
          description: "true/false indicating if the authenticated user has liked this post"
          example: true
        numberOfLikes:
          type: integer
          example: 5

    CreatePostRequest:
      type: object
      properties:
        text:
          type: string
          minLength: 1
          maxLength: 250
          example: "Just had the best coffee ever!"
      required:
        - text

    PostsResponse:
      type: object
      properties:
        posts:
          type: array
          items:
            $ref: '#/components/schemas/PostWithUserSummary'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    PaginationInfo:
      type: object
      properties:
        page:
          type: integer
          example: 1
        pageSize:
          type: integer
          example: 20
        totalItems:
          type: integer
          example: 150
        totalPages:
          type: integer
          example: 8
        hasNextPage:
          type: boolean
          example: true
        hasPreviousPage:
          type: boolean
          example: false

    # Profile Photo Schemas
    ProfilePhotoResponse:
      type: object
      properties:
        profilePhotoUrl:
          type: string
          example: "/Uploads/ProfilePhotos/user_profile_123.jpg"

tags:
  - name: Authentication
    description: User registration, login, and logout
  - name: Users
    description: User management and user-related data
  - name: Posts
    description: Post creation, deletion, and retrieval
  - name: Likes
    description: Post likes and unlikes
  - name: Profile Photos
    description: Profile photo upload, update, and deletion
  - name: Static Files
    description: Static file serving for uploaded content
